
NodeInfo/kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that the Container Network Interface specification file permissions is set to 600 or more restrictive
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that the container network interface file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0056
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the etcd data directory ownership is set to etcd:etcd
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that the etcd data directory ownership is set to etcd:etcd.

See https://avd.aquasec.com/misconfig/kcv0059
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Ensure that the --anonymous-auth argument is set to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Disable anonymous requests to the API server.

See https://avd.aquasec.com/misconfig/kcv0001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --kubelet-certificate-authority argument is set as appropriate
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Verify kubelet's certificate before establishing connection.

See https://avd.aquasec.com/misconfig/kcv0006
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the admission control plugin EventRateLimit is set
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Limit the rate at which the API server accepts requests.

See https://avd.aquasec.com/misconfig/kcv0010
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the admission control plugin AlwaysPullImages is set
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Always pull images.

See https://avd.aquasec.com/misconfig/ksv0012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The SecurityContextDeny admission controller can be used to deny pods which make use of some SecurityContext fields which could allow for privilege escalation in the cluster. This should be used where PodSecurityPolicy is not in place within the cluster.

See https://avd.aquasec.com/misconfig/kcv0013
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --profiling argument is set to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Disable profiling, if not needed.

See https://avd.aquasec.com/misconfig/kcv0018
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --audit-log-maxage argument is set to 30 or as appropriate
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Retain the logs for at least 30 days or as appropriate.

See https://avd.aquasec.com/misconfig/kcv0020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Retain 10 or an appropriate number of old log files.

See https://avd.aquasec.com/misconfig/kcv0021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Rotate log files on reaching 100 MB or as appropriate.

See https://avd.aquasec.com/misconfig/kcv0022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --terminated-pod-gc-threshold argument is set as appropriate
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Activate garbage collector on pod termination, as appropriate.

See https://avd.aquasec.com/misconfig/kcv0033
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the RotateKubeletServerCertificate argument is set to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Enable kubelet server certificate rotation on controller-manager.

See https://avd.aquasec.com/misconfig/kcv0038
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Ensure that the --profiling argument is set to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Disable profiling, if not needed.

See https://avd.aquasec.com/misconfig/kcv0034
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that the kubelet service file permissions are set to 600 or more restrictive
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that the kubelet service file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0069
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-worker (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that the kubelet service file permissions are set to 600 or more restrictive
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that the kubelet service file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0069
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-worker2 (kubernetes)
==================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that the kubelet service file permissions are set to 600 or more restrictive
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that the kubelet service file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0069
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: Ensure that the certificate authorities file permissions are set to 600 or more restrictive
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that the certificate authorities file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0075
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 600 or more restrictive.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0077
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-worker (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 600 or more restrictive.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0077
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



NodeInfo/kind-worker2 (kubernetes)
==================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 600 or more restrictive.
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Ensure that if the kubelet refers to a configuration file with the --config argument, that file has permissions of 600 or more restrictive.

See https://avd.aquasec.com/misconfig/kcv0077
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRoleBinding/cluster-admin (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: ClusterRoleBinding 'cluster-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRoleBinding/cluster-admin:4-11
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   4 ┌     annotations:
   5 │         rbac.authorization.kubernetes.io/autoupdate: "true"
   6 │     creationTimestamp: "2024-08-11T18:55:58Z"
   7 │     labels:
   8 │         kubernetes.io/bootstrapping: rbac-defaults
   9 │     name: cluster-admin
  10 │     resourceVersion: "143"
  11 └     uid: d08319e7-d82c-41a0-a7c1-3d508247e1f9
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRoleBinding/kubeadm:cluster-admins (kubernetes)
======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: ClusterRoleBinding 'kubeadm:cluster-admins' should not bind to roles ["cluster-admin", "admin", "edit"]
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRoleBinding/kubeadm:cluster-admins:4-7
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   4 ┌     creationTimestamp: "2024-08-11T18:55:58Z"
   5 │     name: kubeadm:cluster-admins
   6 │     resourceVersion: "237"
   7 └     uid: 9713272a-fdfa-4b44-96df-772c6428c843
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/admin (kubernetes)
==============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'admin' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/admin:56-73
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌     - apiGroups:
  57 │         - ""
  58 │       resources:
  59 │         - configmaps
  60 │         - events
  61 │         - persistentvolumeclaims
  62 │         - replicationcontrollers
  63 │         - replicationcontrollers/scale
  64 └         - secrets
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/admin (kubernetes)
==============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'admin' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/admin:17-29
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌     - apiGroups:
  18 │         - ""
  19 │       resources:
  20 │         - pods/attach
  21 │         - pods/exec
  22 │         - pods/portforward
  23 │         - pods/proxy
  24 │         - secrets
  25 └         - services/proxy
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/edit (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'edit' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/edit:57-74
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌     - apiGroups:
  58 │         - ""
  59 │       resources:
  60 │         - configmaps
  61 │         - events
  62 │         - persistentvolumeclaims
  63 │         - replicationcontrollers
  64 │         - replicationcontrollers/scale
  65 └         - secrets
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/edit (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'edit' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/edit:18-30
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌     - apiGroups:
  19 │         - ""
  20 │       resources:
  21 │         - pods/attach
  22 │         - pods/exec
  23 │         - pods/portforward
  24 │         - pods/proxy
  25 │         - secrets
  26 └         - services/proxy
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/ingress-nginx (kubernetes)
======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/ingress-nginx:19-30
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  19 ┌     - apiGroups:
  20 │         - ""
  21 │       resources:
  22 │         - configmaps
  23 │         - endpoints
  24 │         - nodes
  25 │         - pods
  26 │         - secrets
  27 └         - namespaces
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:aggregate-to-edit (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:aggregate-to-edit' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:aggregate-to-edit:14-26
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  14 ┌     - apiGroups:
  15 │         - ""
  16 │       resources:
  17 │         - pods/attach
  18 │         - pods/exec
  19 │         - pods/portforward
  20 │         - pods/proxy
  21 │         - secrets
  22 └         - services/proxy
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:aggregate-to-edit (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:aggregate-to-edit' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:aggregate-to-edit:53-70
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌     - apiGroups:
  54 │         - ""
  55 │       resources:
  56 │         - configmaps
  57 │         - events
  58 │         - persistentvolumeclaims
  59 │         - replicationcontrollers
  60 │         - replicationcontrollers/scale
  61 └         - secrets
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:expand-controller (kubernetes)
============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:expand-controller' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:expand-controller:53-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌     - apiGroups:
  54 │         - ""
  55 │       resources:
  56 │         - secrets
  57 │       verbs:
  58 └         - get
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:legacy-service-account-token-cleaner (kubernetes)
===============================================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:legacy-service-account-token-cleaner' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:legacy-service-account-token-cleaner:21-27
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌     - apiGroups:
  22 │         - ""
  23 │       resources:
  24 │         - secrets
  25 │       verbs:
  26 │         - delete
  27 └         - patch
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:persistent-volume-binder (kubernetes)
===================================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:persistent-volume-binder' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:persistent-volume-binder:80-85
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  80 ┌     - apiGroups:
  81 │         - ""
  82 │       resources:
  83 │         - secrets
  84 │       verbs:
  85 └         - get
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:kube-controller-manager (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:kube-controller-manager' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:kube-controller-manager:37-43
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  37 ┌     - apiGroups:
  38 │         - ""
  39 │       resources:
  40 │         - secrets
  41 │         - serviceaccounts
  42 │       verbs:
  43 └         - create
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:kube-controller-manager (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:kube-controller-manager' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:kube-controller-manager:44-49
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌     - apiGroups:
  45 │         - ""
  46 │       resources:
  47 │         - secrets
  48 │       verbs:
  49 └         - delete
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:kube-controller-manager (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:kube-controller-manager' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:kube-controller-manager:50-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  50 ┌     - apiGroups:
  51 │         - ""
  52 │       resources:
  53 │         - configmaps
  54 │         - namespaces
  55 │         - secrets
  56 │         - serviceaccounts
  57 │       verbs:
  58 └         - get
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:kube-controller-manager (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:kube-controller-manager' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:kube-controller-manager:59-65
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  59 ┌     - apiGroups:
  60 │         - ""
  61 │       resources:
  62 │         - secrets
  63 │         - serviceaccounts
  64 │       verbs:
  65 └         - update
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:node (kubernetes)
====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:node' shouldn't have access to manage resource 'secrets'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:node:93-101
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  93 ┌     - apiGroups:
  94 │         - ""
  95 │       resources:
  96 │         - configmaps
  97 │         - secrets
  98 │       verbs:
  99 │         - get
 100 │         - list
 101 └         - watch
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/cluster-admin (kubernetes)
======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: Role permits wildcard verb on wildcard resource
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/cluster-admin:13-18
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  13 ┌     - apiGroups:
  14 │         - '*'
  15 │       resources:
  16 │         - '*'
  17 │       verbs:
  18 └         - '*'
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/local-path-provisioner-role (kubernetes)
====================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: Role permits wildcard verb on specific resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/local-path-provisioner-role:17-24
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  17 ┌     - apiGroups:
  18 │         - ""
  19 │       resources:
  20 │         - endpoints
  21 │         - persistentvolumes
  22 │         - pods
  23 │       verbs:
  24 └         - '*'
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/cluster-admin (kubernetes)
======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'cluster-admin' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/cluster-admin:13-18
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  13 ┌     - apiGroups:
  14 │         - '*'
  15 │       resources:
  16 │         - '*'
  17 │       verbs:
  18 └         - '*'
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/hubble-ui (kubernetes)
==================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'hubble-ui' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/hubble-ui:44-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌     - apiGroups:
  45 │         - cilium.io
  46 │       resources:
  47 │         - '*'
  48 │       verbs:
  49 │         - get
  50 │         - list
  51 └         - watch
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:generic-garbage-collector (kubernetes)
====================================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:generic-garbage-collector' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:generic-garbage-collector:13-23
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  13 ┌     - apiGroups:
  14 │         - '*'
  15 │       resources:
  16 │         - '*'
  17 │       verbs:
  18 │         - delete
  19 │         - get
  20 │         - list
  21 └         - patch
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:horizontal-pod-autoscaler (kubernetes)
====================================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:horizontal-pod-autoscaler' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:horizontal-pod-autoscaler:53-59
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌     - apiGroups:
  54 │         - external.metrics.k8s.io
  55 │       resources:
  56 │         - '*'
  57 │       verbs:
  58 │         - get
  59 └         - list
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:horizontal-pod-autoscaler (kubernetes)
====================================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:horizontal-pod-autoscaler' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:horizontal-pod-autoscaler:46-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  46 ┌     - apiGroups:
  47 │         - custom.metrics.k8s.io
  48 │       resources:
  49 │         - '*'
  50 │       verbs:
  51 │         - get
  52 └         - list
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:namespace-controller (kubernetes)
===============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:namespace-controller' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:namespace-controller:29-37
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌     - apiGroups:
  30 │         - '*'
  31 │       resources:
  32 │         - '*'
  33 │       verbs:
  34 │         - delete
  35 │         - deletecollection
  36 │         - get
  37 └         - list
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:controller:resourcequota-controller (kubernetes)
===================================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:controller:resourcequota-controller' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:controller:resourcequota-controller:13-19
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  13 ┌     - apiGroups:
  14 │         - '*'
  15 │       resources:
  16 │         - '*'
  17 │       verbs:
  18 │         - list
  19 └         - watch
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



ClusterRole/system:kube-controller-manager (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

CRITICAL: ClusterRole 'system:kube-controller-manager' shouldn't manage all resources
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 ClusterRole/system:kube-controller-manager:78-84
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  78 ┌     - apiGroups:
  79 │         - '*'
  80 │       resources:
  81 │         - '*'
  82 │       verbs:
  83 │         - list
  84 └         - watch
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'mount-bpf-fs' of DaemonSet 'cilium' should set 'securityContext.privileged' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'tetragon' of DaemonSet 'tetragon' should set 'securityContext.privileged' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Pod 'etcd-kind-control-plane' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:25-107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌     containers:
  26 │         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 └             - --experimental-watch-progress-notify-interval=5s
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Pod 'kube-apiserver-kind-control-plane' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:25-163
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌     containers:
  26 │         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 └             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Pod 'kube-controller-manager-kind-control-plane' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:24-140
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌     containers:
  25 │         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 └             - --cluster-cidr=10.244.0.0/16
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Pod 'kube-scheduler-kind-control-plane' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:24-86
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌     containers:
  25 │         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 └           image: registry.k8s.io/kube-scheduler:v1.30.0
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: DaemonSet 'cilium' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:20-488
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌     revisionHistoryLimit: 10
  21 │     selector:
  22 │         matchLabels:
  23 │             k8s-app: cilium
  24 │     template:
  25 │         metadata:
  26 │             annotations:
  27 │                 cilium.io/cilium-configmap-checksum: be807b5457223052d9e69a28bd28dc0cdec9d86668a82d011167d4455f6042b2
  28 └                 container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: unconfined
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: DaemonSet 'tetragon' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:21-125
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌     revisionHistoryLimit: 10
  22 │     selector:
  23 │         matchLabels:
  24 │             app.kubernetes.io/instance: tetragon
  25 │             app.kubernetes.io/name: tetragon
  26 │     template:
  27 │         metadata:
  28 │             annotations:
  29 └                 checksum/configmap: 199fa351a7ceb5300ce37ec6be68b701309bab393c0986122e4f3a2446fb168b
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Deployment 'cilium-operator' should not set 'spec.template.spec.hostNetwork' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:21-134
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌     progressDeadlineSeconds: 600
  22 │     replicas: 2
  23 │     revisionHistoryLimit: 10
  24 │     selector:
  25 │         matchLabels:
  26 │             io.cilium/app: operator
  27 │             name: cilium-operator
  28 │     strategy:
  29 └         rollingUpdate:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/local-path-provisioner:18-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌                 - command:
  19 │                     - local-path-provisioner
  20 │                     - --debug
  21 │                     - start
  22 │                     - --helper-image
  23 │                     - docker.io/kindest/local-path-helper:v20230510-486859a6
  24 │                     - --config
  25 │                     - /etc/config/config.json
  26 └                   env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'backend' of Deployment 'hubble-ui' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:77-91
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  77 ┌                 - env:
  78 │                     - name: EVENTS_SERVER_PORT
  79 │                       value: "8090"
  80 │                     - name: FLOWS_API_ADDR
  81 │                       value: hubble-relay:80
  82 │                   image: quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803
  83 │                   imagePullPolicy: IfNotPresent
  84 │                   name: backend
  85 └                   ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'frontend' of Deployment 'hubble-ui' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:43-76
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  43 ┌                 - image: quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   livenessProbe:
  46 │                     failureThreshold: 3
  47 │                     httpGet:
  48 │                         path: /healthz
  49 │                         port: 8081
  50 │                         scheme: HTTP
  51 └                     periodSeconds: 10
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'envoy-proxy' of Deployment 'unguard-envoy-proxy' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-envoy-proxy:39-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - image: ghcr.io/dynatrace-oss/unguard/unguard-envoy-proxy:0.9.3
  40 │                   imagePullPolicy: IfNotPresent
  41 │                   name: envoy-proxy
  42 │                   ports:
  43 │                     - containerPort: 8080
  44 │                       name: http
  45 │                       protocol: TCP
  46 │                     - containerPort: 8081
  47 └                       name: health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'frontend' of Deployment 'unguard-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-frontend:36-81
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: MICROBLOG_SERVICE_ADDRESS
  38 │                       value: unguard-microblog-service
  39 │                     - name: PROXY_SERVICE_ADDRESS
  40 │                       value: unguard-proxy-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: AD_SERVICE_ADDRESS
  44 └                       value: unguard-ad-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'like-service' of Deployment 'unguard-like-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-like-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8000"
  39 │                     - name: API_PATH
  40 │                       value: /like-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: MARIADB_PASSWORD
  44 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'membership-service' of Deployment 'unguard-membership-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-membership-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Development
  39 │                     - name: SERVER_PORT
  40 │                       value: "8083"
  41 │                     - name: API_PATH
  42 │                       value: /membership-service
  43 │                     - name: MARIADB_SERVICE
  44 └                       value: unguard-mariadb
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'microblog-service' of Deployment 'unguard-microblog-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-microblog-service:36-61
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8080"
  39 │                     - name: REDIS_SERVICE_ADDRESS
  40 │                       value: unguard-redis
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: OPENTRACING_JAEGER_ENABLED
  44 └                       value: "false"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'payment-service' of Deployment 'unguard-payment-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-payment-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8084"
  39 │                     - name: API_PATH
  40 │                       value: /payment-service
  41 │                     - name: OTEL_LOGS_EXPORTER
  42 │                       value: none
  43 │                     - name: OTEL_METRICS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'profile-service' of Deployment 'unguard-profile-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-profile-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SPRING_DATASOURCE_URL
  38 │                       value: jdbc:h2:file:./database/bio
  39 │                     - name: SPRING_DATASOURCE_USERNAME
  40 │                       value: sa
  41 │                     - name: SPRING_DATASOURCE_PASSWORD
  42 │                       value: password
  43 │                     - name: OTEL_LOGS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'proxy-service' of Deployment 'unguard-proxy-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-proxy-service:36-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8081"
  39 │                     - name: OPENTRACING_JAEGER_ENABLED
  40 │                       value: "false"
  41 │                     - name: JAEGER_SERVICE_NAME
  42 │                       value: unguard-proxy-service
  43 │                     - name: JAEGER_AGENT_HOST
  44 └                       value: jaeger-agent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'redis' of Deployment 'unguard-redis' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-redis:36-75
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - command:
  37 │                     - redis-server
  38 │                     - /config/redis.conf
  39 │                   env:
  40 │                     - name: MASTER
  41 │                       value: "true"
  42 │                   image: redis:5.0
  43 │                   imagePullPolicy: IfNotPresent
  44 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'status-service' of Deployment 'unguard-status-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-status-service:36-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8083"
  39 │                     - name: API_PATH
  40 │                       value: /status-service
  41 │                     - name: KUBERNETES_NAMESPACE
  42 │                       value: unguard
  43 │                     - name: IGNORED_DEPLOYMENTS
  44 └                       value: unguard-user-simulator
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'user-auth-service' of Deployment 'unguard-user-auth-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-user-auth-service:36-64
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "9091"
  39 │                     - name: MARIADB_SERVICE
  40 │                       value: unguard-mariadb
  41 │                     - name: MARIADB_PASSWORD
  42 │                       valueFrom:
  43 │                         secretKeyRef:
  44 └                             key: mariadb-root-password
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'etcd' of Pod 'etcd-kind-control-plane' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:26-82
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 │             - --experimental-watch-progress-notify-interval=5s
  34 └             - --initial-advertise-peer-urls=https://172.18.0.2:2380
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'kube-apiserver' of Pod 'kube-apiserver-kind-control-plane' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'kube-controller-manager' of Pod 'kube-controller-manager-kind-control-plane' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'kube-scheduler' of Pod 'kube-scheduler-kind-control-plane' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:25-65
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 │           image: registry.k8s.io/kube-scheduler:v1.30.0
  33 └           imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'postgresql' of StatefulSet 'kubeclarity-kubeclarity-postgresql' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/kubeclarity-kubeclarity-postgresql:57-133
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌                 - env:
  58 │                     - name: BITNAMI_DEBUG
  59 │                       value: "false"
  60 │                     - name: POSTGRESQL_PORT_NUMBER
  61 │                       value: "5432"
  62 │                     - name: POSTGRESQL_VOLUME_DIR
  63 │                       value: /bitnami/postgresql
  64 │                     - name: PGDATA
  65 └                       value: /bitnami/postgresql/data
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'apply-sysctl-overwrites' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'cilium-agent' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'clean-cilium-state' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'config' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'install-cni-binaries' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:378-398
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 378 ┌                 - command:
 379 │                     - /install-plugin.sh
 380 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 381 │                   imagePullPolicy: IfNotPresent
 382 │                   name: install-cni-binaries
 383 │                   resources:
 384 │                     requests:
 385 │                         cpu: 100m
 386 └                         memory: 10Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'mount-bpf-fs' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'mount-cgroup' of DaemonSet 'cilium' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'export-stdout' of DaemonSet 'tetragon' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:39-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - /var/run/cilium/tetragon/tetragon.log
  41 │                   command:
  42 │                     - hubble-export-stdout
  43 │                   image: quay.io/cilium/hubble-export-stdout:v1.0.4
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   name: export-stdout
  46 │                   resources: {}
  47 └                   securityContext: {}
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'tetragon' of DaemonSet 'tetragon' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-relay (kubernetes)
====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'hubble-relay' of Deployment 'hubble-relay' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-relay:48-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  48 ┌                 - args:
  49 │                     - serve
  50 │                   command:
  51 │                     - hubble-relay
  52 │                   image: quay.io/cilium/hubble-relay:v1.15.4@sha256:03ad857feaf52f1b4774c29614f42a50b370680eb7d0bfbc1ae065df84b1070a
  53 │                   imagePullPolicy: IfNotPresent
  54 │                   livenessProbe:
  55 │                     failureThreshold: 3
  56 └                     grpc:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'unguard-user-simulator' of CronJob 'unguard-user-simulator' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 CronJob/unguard-user-simulator:29-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌                         - env:
  30 │                             - name: FRONTEND_ADDR
  31 │                               value: unguard-envoy-proxy:8080/ui
  32 │                             - name: SIMULATE_PRIVATE_RANGES
  33 │                               value: "false"
  34 │                           image: ghcr.io/dynatrace-oss/unguard/unguard-user-simulator:0.9.3
  35 │                           imagePullPolicy: IfNotPresent
  36 │                           name: unguard-user-simulator
  37 └                           resources:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'ad-service' of Deployment 'unguard-ad-service' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-ad-service:36-63
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Production
  39 │                     - name: SERVER_PORT
  40 │                       value: "8082"
  41 │                     - name: API_PATH
  42 │                       value: /ad-service
  43 │                     - name: USER_AUTH_SERVICE_ADDRESS
  44 └                       value: unguard-user-auth-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'cilium-operator' of Deployment 'cilium-operator' should set 'securityContext.allowPrivilegeEscalation' to false
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/coredns:45-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  45 ┌                 - args:
  46 │                     - -conf
  47 │                     - /etc/coredns/Corefile
  48 │                   image: registry.k8s.io/coredns/coredns:v1.11.1
  49 │                   imagePullPolicy: IfNotPresent
  50 │                   livenessProbe:
  51 │                     failureThreshold: 5
  52 │                     httpGet:
  53 └                         path: /health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/tetragon-operator (kubernetes)
=========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'tetragon-operator' of Deployment 'tetragon-operator' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/tetragon-operator:44-94
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌                 - args:
  45 │                     - serve
  46 │                     - --config-dir=/etc/tetragon/operator.conf.d/
  47 │                     - --metrics-bind-address=:2113
  48 │                   command:
  49 │                     - /usr/bin/tetragon-operator
  50 │                   image: quay.io/cilium/tetragon-operator:v1.1.2
  51 │                   imagePullPolicy: IfNotPresent
  52 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/local-path-provisioner:18-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌                 - command:
  19 │                     - local-path-provisioner
  20 │                     - --debug
  21 │                     - start
  22 │                     - --helper-image
  23 │                     - docker.io/kindest/local-path-helper:v20230510-486859a6
  24 │                     - --config
  25 │                     - /etc/config/config.json
  26 └                   env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'backend' of Deployment 'hubble-ui' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:77-91
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  77 ┌                 - env:
  78 │                     - name: EVENTS_SERVER_PORT
  79 │                       value: "8090"
  80 │                     - name: FLOWS_API_ADDR
  81 │                       value: hubble-relay:80
  82 │                   image: quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803
  83 │                   imagePullPolicy: IfNotPresent
  84 │                   name: backend
  85 └                   ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'frontend' of Deployment 'hubble-ui' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:43-76
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  43 ┌                 - image: quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   livenessProbe:
  46 │                     failureThreshold: 3
  47 │                     httpGet:
  48 │                         path: /healthz
  49 │                         port: 8081
  50 │                         scheme: HTTP
  51 └                     periodSeconds: 10
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'envoy-proxy' of Deployment 'unguard-envoy-proxy' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-envoy-proxy:39-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - image: ghcr.io/dynatrace-oss/unguard/unguard-envoy-proxy:0.9.3
  40 │                   imagePullPolicy: IfNotPresent
  41 │                   name: envoy-proxy
  42 │                   ports:
  43 │                     - containerPort: 8080
  44 │                       name: http
  45 │                       protocol: TCP
  46 │                     - containerPort: 8081
  47 └                       name: health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'frontend' of Deployment 'unguard-frontend' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-frontend:36-81
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: MICROBLOG_SERVICE_ADDRESS
  38 │                       value: unguard-microblog-service
  39 │                     - name: PROXY_SERVICE_ADDRESS
  40 │                       value: unguard-proxy-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: AD_SERVICE_ADDRESS
  44 └                       value: unguard-ad-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'like-service' of Deployment 'unguard-like-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-like-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8000"
  39 │                     - name: API_PATH
  40 │                       value: /like-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: MARIADB_PASSWORD
  44 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'membership-service' of Deployment 'unguard-membership-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-membership-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Development
  39 │                     - name: SERVER_PORT
  40 │                       value: "8083"
  41 │                     - name: API_PATH
  42 │                       value: /membership-service
  43 │                     - name: MARIADB_SERVICE
  44 └                       value: unguard-mariadb
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'microblog-service' of Deployment 'unguard-microblog-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-microblog-service:36-61
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8080"
  39 │                     - name: REDIS_SERVICE_ADDRESS
  40 │                       value: unguard-redis
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: OPENTRACING_JAEGER_ENABLED
  44 └                       value: "false"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'payment-service' of Deployment 'unguard-payment-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-payment-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8084"
  39 │                     - name: API_PATH
  40 │                       value: /payment-service
  41 │                     - name: OTEL_LOGS_EXPORTER
  42 │                       value: none
  43 │                     - name: OTEL_METRICS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'profile-service' of Deployment 'unguard-profile-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-profile-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SPRING_DATASOURCE_URL
  38 │                       value: jdbc:h2:file:./database/bio
  39 │                     - name: SPRING_DATASOURCE_USERNAME
  40 │                       value: sa
  41 │                     - name: SPRING_DATASOURCE_PASSWORD
  42 │                       value: password
  43 │                     - name: OTEL_LOGS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'proxy-service' of Deployment 'unguard-proxy-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-proxy-service:36-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8081"
  39 │                     - name: OPENTRACING_JAEGER_ENABLED
  40 │                       value: "false"
  41 │                     - name: JAEGER_SERVICE_NAME
  42 │                       value: unguard-proxy-service
  43 │                     - name: JAEGER_AGENT_HOST
  44 └                       value: jaeger-agent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'redis' of Deployment 'unguard-redis' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-redis:36-75
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - command:
  37 │                     - redis-server
  38 │                     - /config/redis.conf
  39 │                   env:
  40 │                     - name: MASTER
  41 │                       value: "true"
  42 │                   image: redis:5.0
  43 │                   imagePullPolicy: IfNotPresent
  44 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'status-service' of Deployment 'unguard-status-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-status-service:36-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8083"
  39 │                     - name: API_PATH
  40 │                       value: /status-service
  41 │                     - name: KUBERNETES_NAMESPACE
  42 │                       value: unguard
  43 │                     - name: IGNORED_DEPLOYMENTS
  44 └                       value: unguard-user-simulator
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'user-auth-service' of Deployment 'unguard-user-auth-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-user-auth-service:36-64
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "9091"
  39 │                     - name: MARIADB_SERVICE
  40 │                       value: unguard-mariadb
  41 │                     - name: MARIADB_PASSWORD
  42 │                       valueFrom:
  43 │                         secretKeyRef:
  44 └                             key: mariadb-root-password
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'etcd' of Pod 'etcd-kind-control-plane' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:26-82
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 │             - --experimental-watch-progress-notify-interval=5s
  34 └             - --initial-advertise-peer-urls=https://172.18.0.2:2380
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'kube-apiserver' of Pod 'kube-apiserver-kind-control-plane' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'kube-controller-manager' of Pod 'kube-controller-manager-kind-control-plane' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'kube-scheduler' of Pod 'kube-scheduler-kind-control-plane' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:25-65
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 │           image: registry.k8s.io/kube-scheduler:v1.30.0
  33 └           imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'postgresql' of StatefulSet 'kubeclarity-kubeclarity-postgresql' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/kubeclarity-kubeclarity-postgresql:57-133
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌                 - env:
  58 │                     - name: BITNAMI_DEBUG
  59 │                       value: "false"
  60 │                     - name: POSTGRESQL_PORT_NUMBER
  61 │                       value: "5432"
  62 │                     - name: POSTGRESQL_VOLUME_DIR
  63 │                       value: /bitnami/postgresql
  64 │                     - name: PGDATA
  65 └                       value: /bitnami/postgresql/data
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'apply-sysctl-overwrites' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'cilium-agent' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'clean-cilium-state' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'config' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'install-cni-binaries' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:378-398
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 378 ┌                 - command:
 379 │                     - /install-plugin.sh
 380 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 381 │                   imagePullPolicy: IfNotPresent
 382 │                   name: install-cni-binaries
 383 │                   resources:
 384 │                     requests:
 385 │                         cpu: 100m
 386 └                         memory: 10Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'mount-bpf-fs' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'mount-cgroup' of DaemonSet 'cilium' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'export-stdout' of DaemonSet 'tetragon' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:39-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - /var/run/cilium/tetragon/tetragon.log
  41 │                   command:
  42 │                     - hubble-export-stdout
  43 │                   image: quay.io/cilium/hubble-export-stdout:v1.0.4
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   name: export-stdout
  46 │                   resources: {}
  47 └                   securityContext: {}
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'tetragon' of DaemonSet 'tetragon' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'unguard-user-simulator' of CronJob 'unguard-user-simulator' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 CronJob/unguard-user-simulator:29-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌                         - env:
  30 │                             - name: FRONTEND_ADDR
  31 │                               value: unguard-envoy-proxy:8080/ui
  32 │                             - name: SIMULATE_PRIVATE_RANGES
  33 │                               value: "false"
  34 │                           image: ghcr.io/dynatrace-oss/unguard/unguard-user-simulator:0.9.3
  35 │                           imagePullPolicy: IfNotPresent
  36 │                           name: unguard-user-simulator
  37 └                           resources:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'ad-service' of Deployment 'unguard-ad-service' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-ad-service:36-63
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Production
  39 │                     - name: SERVER_PORT
  40 │                       value: "8082"
  41 │                     - name: API_PATH
  42 │                       value: /ad-service
  43 │                     - name: USER_AUTH_SERVICE_ADDRESS
  44 └                       value: unguard-user-auth-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'cilium-operator' of Deployment 'cilium-operator' should set 'securityContext.runAsNonRoot' to true
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/coredns:45-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  45 ┌                 - args:
  46 │                     - -conf
  47 │                     - /etc/coredns/Corefile
  48 │                   image: registry.k8s.io/coredns/coredns:v1.11.1
  49 │                   imagePullPolicy: IfNotPresent
  50 │                   livenessProbe:
  51 │                     failureThreshold: 5
  52 │                     httpGet:
  53 └                         path: /health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'gadget' of DaemonSet 'gadget' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'apply-sysctl-overwrites' of DaemonSet 'cilium' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'cilium-agent' of DaemonSet 'cilium' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'clean-cilium-state' of DaemonSet 'cilium' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'mount-cgroup' of DaemonSet 'cilium' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/ingress-nginx-controller (kubernetes)
================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/ingress-nginx-controller:49-124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - /nginx-ingress-controller
  51 │                     - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  52 │                     - --election-id=ingress-nginx-leader
  53 │                     - --controller-class=k8s.io/ingress-nginx
  54 │                     - --ingress-class=nginx
  55 │                     - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  56 │                   env:
  57 └                     - name: POD_NAME
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/local-path-provisioner:18-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌                 - command:
  19 │                     - local-path-provisioner
  20 │                     - --debug
  21 │                     - start
  22 │                     - --helper-image
  23 │                     - docker.io/kindest/local-path-helper:v20230510-486859a6
  24 │                     - --config
  25 │                     - /etc/config/config.json
  26 └                   env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'backend' of Deployment 'hubble-ui' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:77-91
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  77 ┌                 - env:
  78 │                     - name: EVENTS_SERVER_PORT
  79 │                       value: "8090"
  80 │                     - name: FLOWS_API_ADDR
  81 │                       value: hubble-relay:80
  82 │                   image: quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803
  83 │                   imagePullPolicy: IfNotPresent
  84 │                   name: backend
  85 └                   ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'frontend' of Deployment 'hubble-ui' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:43-76
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  43 ┌                 - image: quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   livenessProbe:
  46 │                     failureThreshold: 3
  47 │                     httpGet:
  48 │                         path: /healthz
  49 │                         port: 8081
  50 │                         scheme: HTTP
  51 └                     periodSeconds: 10
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'envoy-proxy' of Deployment 'unguard-envoy-proxy' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-envoy-proxy:39-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - image: ghcr.io/dynatrace-oss/unguard/unguard-envoy-proxy:0.9.3
  40 │                   imagePullPolicy: IfNotPresent
  41 │                   name: envoy-proxy
  42 │                   ports:
  43 │                     - containerPort: 8080
  44 │                       name: http
  45 │                       protocol: TCP
  46 │                     - containerPort: 8081
  47 └                       name: health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'frontend' of Deployment 'unguard-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-frontend:36-81
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: MICROBLOG_SERVICE_ADDRESS
  38 │                       value: unguard-microblog-service
  39 │                     - name: PROXY_SERVICE_ADDRESS
  40 │                       value: unguard-proxy-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: AD_SERVICE_ADDRESS
  44 └                       value: unguard-ad-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'like-service' of Deployment 'unguard-like-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-like-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8000"
  39 │                     - name: API_PATH
  40 │                       value: /like-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: MARIADB_PASSWORD
  44 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'membership-service' of Deployment 'unguard-membership-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-membership-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Development
  39 │                     - name: SERVER_PORT
  40 │                       value: "8083"
  41 │                     - name: API_PATH
  42 │                       value: /membership-service
  43 │                     - name: MARIADB_SERVICE
  44 └                       value: unguard-mariadb
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'microblog-service' of Deployment 'unguard-microblog-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-microblog-service:36-61
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8080"
  39 │                     - name: REDIS_SERVICE_ADDRESS
  40 │                       value: unguard-redis
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: OPENTRACING_JAEGER_ENABLED
  44 └                       value: "false"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'payment-service' of Deployment 'unguard-payment-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-payment-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8084"
  39 │                     - name: API_PATH
  40 │                       value: /payment-service
  41 │                     - name: OTEL_LOGS_EXPORTER
  42 │                       value: none
  43 │                     - name: OTEL_METRICS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'profile-service' of Deployment 'unguard-profile-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-profile-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SPRING_DATASOURCE_URL
  38 │                       value: jdbc:h2:file:./database/bio
  39 │                     - name: SPRING_DATASOURCE_USERNAME
  40 │                       value: sa
  41 │                     - name: SPRING_DATASOURCE_PASSWORD
  42 │                       value: password
  43 │                     - name: OTEL_LOGS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'proxy-service' of Deployment 'unguard-proxy-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-proxy-service:36-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8081"
  39 │                     - name: OPENTRACING_JAEGER_ENABLED
  40 │                       value: "false"
  41 │                     - name: JAEGER_SERVICE_NAME
  42 │                       value: unguard-proxy-service
  43 │                     - name: JAEGER_AGENT_HOST
  44 └                       value: jaeger-agent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'redis' of Deployment 'unguard-redis' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-redis:36-75
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - command:
  37 │                     - redis-server
  38 │                     - /config/redis.conf
  39 │                   env:
  40 │                     - name: MASTER
  41 │                       value: "true"
  42 │                   image: redis:5.0
  43 │                   imagePullPolicy: IfNotPresent
  44 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'status-service' of Deployment 'unguard-status-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-status-service:36-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8083"
  39 │                     - name: API_PATH
  40 │                       value: /status-service
  41 │                     - name: KUBERNETES_NAMESPACE
  42 │                       value: unguard
  43 │                     - name: IGNORED_DEPLOYMENTS
  44 └                       value: unguard-user-simulator
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'user-auth-service' of Deployment 'unguard-user-auth-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-user-auth-service:36-64
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "9091"
  39 │                     - name: MARIADB_SERVICE
  40 │                       value: unguard-mariadb
  41 │                     - name: MARIADB_PASSWORD
  42 │                       valueFrom:
  43 │                         secretKeyRef:
  44 └                             key: mariadb-root-password
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'etcd' of Pod 'etcd-kind-control-plane' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:26-82
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 │             - --experimental-watch-progress-notify-interval=5s
  34 └             - --initial-advertise-peer-urls=https://172.18.0.2:2380
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-apiserver' of Pod 'kube-apiserver-kind-control-plane' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-controller-manager' of Pod 'kube-controller-manager-kind-control-plane' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-scheduler' of Pod 'kube-scheduler-kind-control-plane' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:25-65
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 │           image: registry.k8s.io/kube-scheduler:v1.30.0
  33 └           imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'postgresql' of StatefulSet 'kubeclarity-kubeclarity-postgresql' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/kubeclarity-kubeclarity-postgresql:57-133
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌                 - env:
  58 │                     - name: BITNAMI_DEBUG
  59 │                       value: "false"
  60 │                     - name: POSTGRESQL_PORT_NUMBER
  61 │                       value: "5432"
  62 │                     - name: POSTGRESQL_VOLUME_DIR
  63 │                       value: /bitnami/postgresql
  64 │                     - name: PGDATA
  65 └                       value: /bitnami/postgresql/data
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/unguard-mariadb (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mariadb' of StatefulSet 'unguard-mariadb' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/unguard-mariadb:56-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌                 - env:
  57 │                     - name: BITNAMI_DEBUG
  58 │                       value: "false"
  59 │                     - name: MARIADB_ROOT_PASSWORD
  60 │                       valueFrom:
  61 │                         secretKeyRef:
  62 │                             key: mariadb-root-password
  63 │                             name: unguard-mariadb
  64 └                     - name: MARIADB_DATABASE
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'config' of DaemonSet 'cilium' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mount-bpf-fs' of DaemonSet 'cilium' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'export-stdout' of DaemonSet 'tetragon' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:39-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - /var/run/cilium/tetragon/tetragon.log
  41 │                   command:
  42 │                     - hubble-export-stdout
  43 │                   image: quay.io/cilium/hubble-export-stdout:v1.0.4
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   name: export-stdout
  46 │                   resources: {}
  47 └                   securityContext: {}
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'tetragon' of DaemonSet 'tetragon' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'unguard-user-simulator' of CronJob 'unguard-user-simulator' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 CronJob/unguard-user-simulator:29-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌                         - env:
  30 │                             - name: FRONTEND_ADDR
  31 │                               value: unguard-envoy-proxy:8080/ui
  32 │                             - name: SIMULATE_PRIVATE_RANGES
  33 │                               value: "false"
  34 │                           image: ghcr.io/dynatrace-oss/unguard/unguard-user-simulator:0.9.3
  35 │                           imagePullPolicy: IfNotPresent
  36 │                           name: unguard-user-simulator
  37 └                           resources:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'ad-service' of Deployment 'unguard-ad-service' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-ad-service:36-63
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Production
  39 │                     - name: SERVER_PORT
  40 │                       value: "8082"
  41 │                     - name: API_PATH
  42 │                       value: /ad-service
  43 │                     - name: USER_AUTH_SERVICE_ADDRESS
  44 └                       value: unguard-user-auth-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'cilium-operator' of Deployment 'cilium-operator' should add 'ALL' to 'securityContext.capabilities.drop'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Pod 'etcd-kind-control-plane' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:25-107
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌     containers:
  26 │         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 └             - --experimental-watch-progress-notify-interval=5s
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Pod 'kube-apiserver-kind-control-plane' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:25-163
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌     containers:
  26 │         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 └             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Pod 'kube-controller-manager-kind-control-plane' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:24-140
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌     containers:
  25 │         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 └             - --cluster-cidr=10.244.0.0/16
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: Pod 'kube-scheduler-kind-control-plane' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:24-86
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  24 ┌     containers:
  25 │         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 └           image: registry.k8s.io/kube-scheduler:v1.30.0
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: DaemonSet 'gadget' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:15-205
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  15 ┌     revisionHistoryLimit: 10
  16 │     selector:
  17 │         matchLabels:
  18 │             k8s-app: gadget
  19 │     template:
  20 │         metadata:
  21 │             annotations:
  22 │                 container.apparmor.security.beta.kubernetes.io/gadget: unconfined
  23 └                 inspektor-gadget.kinvolk.io/option-hook-mode: auto
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: DaemonSet 'cilium' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:20-488
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌     revisionHistoryLimit: 10
  21 │     selector:
  22 │         matchLabels:
  23 │             k8s-app: cilium
  24 │     template:
  25 │         metadata:
  26 │             annotations:
  27 │                 cilium.io/cilium-configmap-checksum: be807b5457223052d9e69a28bd28dc0cdec9d86668a82d011167d4455f6042b2
  28 └                 container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: unconfined
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: DaemonSet 'tetragon' should not set 'spec.template.volumes.hostPath'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:21-125
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  21 ┌     revisionHistoryLimit: 10
  22 │     selector:
  23 │         matchLabels:
  24 │             app.kubernetes.io/instance: tetragon
  25 │             app.kubernetes.io/name: tetragon
  26 │     template:
  27 │         metadata:
  28 │             annotations:
  29 └                 checksum/configmap: 199fa351a7ceb5300ce37ec6be68b701309bab393c0986122e4f3a2446fb168b
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:378-398
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 378 ┌                 - command:
 379 │                     - /install-plugin.sh
 380 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 381 │                   imagePullPolicy: IfNotPresent
 382 │                   name: install-cni-binaries
 383 │                   resources:
 384 │                     requests:
 385 │                         cpu: 100m
 386 └                         memory: 10Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-operator' of Deployment 'cilium-operator' should not set host ports, 'ports[*].hostPort'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/tetragon-operator (kubernetes)
=========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "tetragon-operator" of deployment "tetragon-operator" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity-kubeclarity-wait-for-grype-server" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity-kubeclarity-wait-for-pg-db" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity-kubeclarity-wait-for-sbom-db" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-grype-server (kubernetes)
============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "grype-server" of deployment "kubeclarity-kubeclarity-grype-server" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-sbom-db (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "sbom-db" of deployment "kubeclarity-kubeclarity-sbom-db" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "local-path-provisioner" of deployment "local-path-provisioner" in "local-path-storage" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "backend" of deployment "hubble-ui" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "frontend" of deployment "hubble-ui" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "envoy-proxy" of deployment "unguard-envoy-proxy" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "frontend" of deployment "unguard-frontend" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "like-service" of deployment "unguard-like-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "membership-service" of deployment "unguard-membership-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "microblog-service" of deployment "unguard-microblog-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "payment-service" of deployment "unguard-payment-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "profile-service" of deployment "unguard-profile-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "proxy-service" of deployment "unguard-proxy-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "redis" of deployment "unguard-redis" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "status-service" of deployment "unguard-status-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "user-auth-service" of deployment "unguard-user-auth-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "etcd" of pod "etcd-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kube-apiserver" of pod "kube-apiserver-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kube-controller-manager" of pod "kube-controller-manager-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kube-scheduler" of pod "kube-scheduler-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "postgresql" of statefulset "kubeclarity-kubeclarity-postgresql" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/unguard-mariadb (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "mariadb" of statefulset "unguard-mariadb" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "gadget" of daemonset "gadget" in "gadget" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "apply-sysctl-overwrites" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "cilium-agent" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "clean-cilium-state" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "config" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "install-cni-binaries" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "mount-bpf-fs" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "mount-cgroup" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "export-stdout" of daemonset "tetragon" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "tetragon" of daemonset "tetragon" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-relay (kubernetes)
====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "hubble-relay" of deployment "hubble-relay" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "unguard-user-simulator" of cronjob "unguard-user-simulator" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "ad-service" of deployment "unguard-ad-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "cilium-operator" of deployment "cilium-operator" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/coredns:45-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  45 ┌                 - args:
  46 │                     - -conf
  47 │                     - /etc/coredns/Corefile
  48 │                   image: registry.k8s.io/coredns/coredns:v1.11.1
  49 │                   imagePullPolicy: IfNotPresent
  50 │                   livenessProbe:
  51 │                     failureThreshold: 5
  52 │                     httpGet:
  53 └                         path: /health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/tetragon-operator (kubernetes)
=========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'tetragon-operator' of Deployment 'tetragon-operator' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/tetragon-operator:44-94
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌                 - args:
  45 │                     - serve
  46 │                     - --config-dir=/etc/tetragon/operator.conf.d/
  47 │                     - --metrics-bind-address=:2113
  48 │                   command:
  49 │                     - /usr/bin/tetragon-operator
  50 │                   image: quay.io/cilium/tetragon-operator:v1.1.2
  51 │                   imagePullPolicy: IfNotPresent
  52 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:39-134
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - run
  41 │                     - --log-level
  42 │                     - warning
  43 │                   env:
  44 │                     - name: ENABLE_DB_INFO_LOGS
  45 │                       value: "false"
  46 │                     - name: DB_NAME
  47 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity-kubeclarity-wait-for-grype-server' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:211-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 211 ┌                 - args:
 212 │                     - /bin/sh
 213 │                     - -c
 214 │                     - |
 215 │                       set -x; while [ $(curl -sw '%{http_code}' "http://kubeclarity-kubeclarity-grype-server:8080/healthz/ready" -o /dev/null) -ne 200 ]; do
 216 │                         echo waiting for grype-server to be ready; sleep 2;
 217 │                       done;
 218 │                   image: docker.io/curlimages/curl:7.87.0
 219 └                   imagePullPolicy: IfNotPresent
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity-kubeclarity-wait-for-pg-db' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:137-182
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 137 ┌                 - command:
 138 │                     - sh
 139 │                     - -c
 140 │                     - until pg_isready -h "$DB_HOST" -p "$DB_PORT_NUMBER" -U "$DB_USER" -d "dbname=$DB_NAME"; do echo waiting for database; sleep 2; done;
 141 │                   env:
 142 │                     - name: DB_NAME
 143 │                       valueFrom:
 144 │                         secretKeyRef:
 145 └                             key: postgres-database
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity-kubeclarity-wait-for-sbom-db' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:183-210
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 183 ┌                 - args:
 184 │                     - /bin/sh
 185 │                     - -c
 186 │                     - |
 187 │                       set -x; while [ $(curl -sw '%{http_code}' "http://kubeclarity-kubeclarity-sbom-db:8081/healthz/ready" -o /dev/null) -ne 200 ]; do
 188 │                         echo waiting for sbom database; sleep 2;
 189 │                       done;
 190 │                   image: docker.io/curlimages/curl:7.87.0
 191 └                   imagePullPolicy: IfNotPresent
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-grype-server (kubernetes)
============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'grype-server' of Deployment 'kubeclarity-kubeclarity-grype-server' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity-grype-server:38-88
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  38 ┌                 - args:
  39 │                     - run
  40 │                     - --log-level
  41 │                     - warning
  42 │                   env:
  43 │                     - name: DB_ROOT_DIR
  44 │                       value: /tmp/
  45 │                   image: ghcr.io/openclarity/grype-server:v0.6.0
  46 └                   imagePullPolicy: Always
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-sbom-db (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'sbom-db' of Deployment 'kubeclarity-kubeclarity-sbom-db' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity-sbom-db:38-85
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  38 ┌                 - args:
  39 │                     - run
  40 │                     - --log-level
  41 │                     - warning
  42 │                   image: ghcr.io/openclarity/kubeclarity-sbom-db:v2.23.3
  43 │                   imagePullPolicy: Always
  44 │                   livenessProbe:
  45 │                     failureThreshold: 5
  46 └                     httpGet:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/local-path-provisioner:18-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌                 - command:
  19 │                     - local-path-provisioner
  20 │                     - --debug
  21 │                     - start
  22 │                     - --helper-image
  23 │                     - docker.io/kindest/local-path-helper:v20230510-486859a6
  24 │                     - --config
  25 │                     - /etc/config/config.json
  26 └                   env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'backend' of Deployment 'hubble-ui' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:77-91
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  77 ┌                 - env:
  78 │                     - name: EVENTS_SERVER_PORT
  79 │                       value: "8090"
  80 │                     - name: FLOWS_API_ADDR
  81 │                       value: hubble-relay:80
  82 │                   image: quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803
  83 │                   imagePullPolicy: IfNotPresent
  84 │                   name: backend
  85 └                   ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'frontend' of Deployment 'hubble-ui' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:43-76
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  43 ┌                 - image: quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   livenessProbe:
  46 │                     failureThreshold: 3
  47 │                     httpGet:
  48 │                         path: /healthz
  49 │                         port: 8081
  50 │                         scheme: HTTP
  51 └                     periodSeconds: 10
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'envoy-proxy' of Deployment 'unguard-envoy-proxy' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-envoy-proxy:39-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - image: ghcr.io/dynatrace-oss/unguard/unguard-envoy-proxy:0.9.3
  40 │                   imagePullPolicy: IfNotPresent
  41 │                   name: envoy-proxy
  42 │                   ports:
  43 │                     - containerPort: 8080
  44 │                       name: http
  45 │                       protocol: TCP
  46 │                     - containerPort: 8081
  47 └                       name: health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'frontend' of Deployment 'unguard-frontend' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-frontend:36-81
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: MICROBLOG_SERVICE_ADDRESS
  38 │                       value: unguard-microblog-service
  39 │                     - name: PROXY_SERVICE_ADDRESS
  40 │                       value: unguard-proxy-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: AD_SERVICE_ADDRESS
  44 └                       value: unguard-ad-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'like-service' of Deployment 'unguard-like-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-like-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8000"
  39 │                     - name: API_PATH
  40 │                       value: /like-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: MARIADB_PASSWORD
  44 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'membership-service' of Deployment 'unguard-membership-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-membership-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Development
  39 │                     - name: SERVER_PORT
  40 │                       value: "8083"
  41 │                     - name: API_PATH
  42 │                       value: /membership-service
  43 │                     - name: MARIADB_SERVICE
  44 └                       value: unguard-mariadb
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'microblog-service' of Deployment 'unguard-microblog-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-microblog-service:36-61
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8080"
  39 │                     - name: REDIS_SERVICE_ADDRESS
  40 │                       value: unguard-redis
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: OPENTRACING_JAEGER_ENABLED
  44 └                       value: "false"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'payment-service' of Deployment 'unguard-payment-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-payment-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8084"
  39 │                     - name: API_PATH
  40 │                       value: /payment-service
  41 │                     - name: OTEL_LOGS_EXPORTER
  42 │                       value: none
  43 │                     - name: OTEL_METRICS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'profile-service' of Deployment 'unguard-profile-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-profile-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SPRING_DATASOURCE_URL
  38 │                       value: jdbc:h2:file:./database/bio
  39 │                     - name: SPRING_DATASOURCE_USERNAME
  40 │                       value: sa
  41 │                     - name: SPRING_DATASOURCE_PASSWORD
  42 │                       value: password
  43 │                     - name: OTEL_LOGS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'proxy-service' of Deployment 'unguard-proxy-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-proxy-service:36-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8081"
  39 │                     - name: OPENTRACING_JAEGER_ENABLED
  40 │                       value: "false"
  41 │                     - name: JAEGER_SERVICE_NAME
  42 │                       value: unguard-proxy-service
  43 │                     - name: JAEGER_AGENT_HOST
  44 └                       value: jaeger-agent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'redis' of Deployment 'unguard-redis' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-redis:36-75
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - command:
  37 │                     - redis-server
  38 │                     - /config/redis.conf
  39 │                   env:
  40 │                     - name: MASTER
  41 │                       value: "true"
  42 │                   image: redis:5.0
  43 │                   imagePullPolicy: IfNotPresent
  44 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'status-service' of Deployment 'unguard-status-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-status-service:36-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8083"
  39 │                     - name: API_PATH
  40 │                       value: /status-service
  41 │                     - name: KUBERNETES_NAMESPACE
  42 │                       value: unguard
  43 │                     - name: IGNORED_DEPLOYMENTS
  44 └                       value: unguard-user-simulator
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'user-auth-service' of Deployment 'unguard-user-auth-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-user-auth-service:36-64
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "9091"
  39 │                     - name: MARIADB_SERVICE
  40 │                       value: unguard-mariadb
  41 │                     - name: MARIADB_PASSWORD
  42 │                       valueFrom:
  43 │                         secretKeyRef:
  44 └                             key: mariadb-root-password
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'etcd' of Pod 'etcd-kind-control-plane' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:26-82
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 │             - --experimental-watch-progress-notify-interval=5s
  34 └             - --initial-advertise-peer-urls=https://172.18.0.2:2380
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-apiserver' of Pod 'kube-apiserver-kind-control-plane' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-controller-manager' of Pod 'kube-controller-manager-kind-control-plane' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-scheduler' of Pod 'kube-scheduler-kind-control-plane' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:25-65
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 │           image: registry.k8s.io/kube-scheduler:v1.30.0
  33 └           imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'postgresql' of StatefulSet 'kubeclarity-kubeclarity-postgresql' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/kubeclarity-kubeclarity-postgresql:57-133
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌                 - env:
  58 │                     - name: BITNAMI_DEBUG
  59 │                       value: "false"
  60 │                     - name: POSTGRESQL_PORT_NUMBER
  61 │                       value: "5432"
  62 │                     - name: POSTGRESQL_VOLUME_DIR
  63 │                       value: /bitnami/postgresql
  64 │                     - name: PGDATA
  65 └                       value: /bitnami/postgresql/data
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/unguard-mariadb (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mariadb' of StatefulSet 'unguard-mariadb' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/unguard-mariadb:56-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌                 - env:
  57 │                     - name: BITNAMI_DEBUG
  58 │                       value: "false"
  59 │                     - name: MARIADB_ROOT_PASSWORD
  60 │                       valueFrom:
  61 │                         secretKeyRef:
  62 │                             key: mariadb-root-password
  63 │                             name: unguard-mariadb
  64 └                     - name: MARIADB_DATABASE
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'apply-sysctl-overwrites' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'cilium-agent' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'clean-cilium-state' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'config' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'install-cni-binaries' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:378-398
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 378 ┌                 - command:
 379 │                     - /install-plugin.sh
 380 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 381 │                   imagePullPolicy: IfNotPresent
 382 │                   name: install-cni-binaries
 383 │                   resources:
 384 │                     requests:
 385 │                         cpu: 100m
 386 └                         memory: 10Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mount-bpf-fs' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mount-cgroup' of DaemonSet 'cilium' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'export-stdout' of DaemonSet 'tetragon' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:39-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - /var/run/cilium/tetragon/tetragon.log
  41 │                   command:
  42 │                     - hubble-export-stdout
  43 │                   image: quay.io/cilium/hubble-export-stdout:v1.0.4
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   name: export-stdout
  46 │                   resources: {}
  47 └                   securityContext: {}
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'tetragon' of DaemonSet 'tetragon' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'unguard-user-simulator' of CronJob 'unguard-user-simulator' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 CronJob/unguard-user-simulator:29-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌                         - env:
  30 │                             - name: FRONTEND_ADDR
  31 │                               value: unguard-envoy-proxy:8080/ui
  32 │                             - name: SIMULATE_PRIVATE_RANGES
  33 │                               value: "false"
  34 │                           image: ghcr.io/dynatrace-oss/unguard/unguard-user-simulator:0.9.3
  35 │                           imagePullPolicy: IfNotPresent
  36 │                           name: unguard-user-simulator
  37 └                           resources:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'ad-service' of Deployment 'unguard-ad-service' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-ad-service:36-63
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Production
  39 │                     - name: SERVER_PORT
  40 │                       value: "8082"
  41 │                     - name: API_PATH
  42 │                       value: /ad-service
  43 │                     - name: USER_AUTH_SERVICE_ADDRESS
  44 └                       value: unguard-user-auth-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'cilium-operator' of Deployment 'cilium-operator' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/ingress-nginx-controller (kubernetes)
================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/ingress-nginx-controller:49-124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - /nginx-ingress-controller
  51 │                     - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  52 │                     - --election-id=ingress-nginx-leader
  53 │                     - --controller-class=k8s.io/ingress-nginx
  54 │                     - --ingress-class=nginx
  55 │                     - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  56 │                   env:
  57 └                     - name: POD_NAME
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/coredns:45-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  45 ┌                 - args:
  46 │                     - -conf
  47 │                     - /etc/coredns/Corefile
  48 │                   image: registry.k8s.io/coredns/coredns:v1.11.1
  49 │                   imagePullPolicy: IfNotPresent
  50 │                   livenessProbe:
  51 │                     failureThreshold: 5
  52 │                     httpGet:
  53 └                         path: /health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/tetragon-operator (kubernetes)
=========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'tetragon-operator' of Deployment 'tetragon-operator' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/tetragon-operator:44-94
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌                 - args:
  45 │                     - serve
  46 │                     - --config-dir=/etc/tetragon/operator.conf.d/
  47 │                     - --metrics-bind-address=:2113
  48 │                   command:
  49 │                     - /usr/bin/tetragon-operator
  50 │                   image: quay.io/cilium/tetragon-operator:v1.1.2
  51 │                   imagePullPolicy: IfNotPresent
  52 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:39-134
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - run
  41 │                     - --log-level
  42 │                     - warning
  43 │                   env:
  44 │                     - name: ENABLE_DB_INFO_LOGS
  45 │                       value: "false"
  46 │                     - name: DB_NAME
  47 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity-kubeclarity-wait-for-grype-server' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:211-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 211 ┌                 - args:
 212 │                     - /bin/sh
 213 │                     - -c
 214 │                     - |
 215 │                       set -x; while [ $(curl -sw '%{http_code}' "http://kubeclarity-kubeclarity-grype-server:8080/healthz/ready" -o /dev/null) -ne 200 ]; do
 216 │                         echo waiting for grype-server to be ready; sleep 2;
 217 │                       done;
 218 │                   image: docker.io/curlimages/curl:7.87.0
 219 └                   imagePullPolicy: IfNotPresent
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity-kubeclarity-wait-for-pg-db' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:137-182
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 137 ┌                 - command:
 138 │                     - sh
 139 │                     - -c
 140 │                     - until pg_isready -h "$DB_HOST" -p "$DB_PORT_NUMBER" -U "$DB_USER" -d "dbname=$DB_NAME"; do echo waiting for database; sleep 2; done;
 141 │                   env:
 142 │                     - name: DB_NAME
 143 │                       valueFrom:
 144 │                         secretKeyRef:
 145 └                             key: postgres-database
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kubeclarity-kubeclarity-wait-for-sbom-db' of Deployment 'kubeclarity-kubeclarity' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:183-210
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 183 ┌                 - args:
 184 │                     - /bin/sh
 185 │                     - -c
 186 │                     - |
 187 │                       set -x; while [ $(curl -sw '%{http_code}' "http://kubeclarity-kubeclarity-sbom-db:8081/healthz/ready" -o /dev/null) -ne 200 ]; do
 188 │                         echo waiting for sbom database; sleep 2;
 189 │                       done;
 190 │                   image: docker.io/curlimages/curl:7.87.0
 191 └                   imagePullPolicy: IfNotPresent
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-grype-server (kubernetes)
============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'grype-server' of Deployment 'kubeclarity-kubeclarity-grype-server' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity-grype-server:38-88
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  38 ┌                 - args:
  39 │                     - run
  40 │                     - --log-level
  41 │                     - warning
  42 │                   env:
  43 │                     - name: DB_ROOT_DIR
  44 │                       value: /tmp/
  45 │                   image: ghcr.io/openclarity/grype-server:v0.6.0
  46 └                   imagePullPolicy: Always
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-sbom-db (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'sbom-db' of Deployment 'kubeclarity-kubeclarity-sbom-db' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity-sbom-db:38-85
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  38 ┌                 - args:
  39 │                     - run
  40 │                     - --log-level
  41 │                     - warning
  42 │                   image: ghcr.io/openclarity/kubeclarity-sbom-db:v2.23.3
  43 │                   imagePullPolicy: Always
  44 │                   livenessProbe:
  45 │                     failureThreshold: 5
  46 └                     httpGet:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'local-path-provisioner' of Deployment 'local-path-provisioner' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/local-path-provisioner:18-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌                 - command:
  19 │                     - local-path-provisioner
  20 │                     - --debug
  21 │                     - start
  22 │                     - --helper-image
  23 │                     - docker.io/kindest/local-path-helper:v20230510-486859a6
  24 │                     - --config
  25 │                     - /etc/config/config.json
  26 └                   env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'backend' of Deployment 'hubble-ui' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:77-91
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  77 ┌                 - env:
  78 │                     - name: EVENTS_SERVER_PORT
  79 │                       value: "8090"
  80 │                     - name: FLOWS_API_ADDR
  81 │                       value: hubble-relay:80
  82 │                   image: quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803
  83 │                   imagePullPolicy: IfNotPresent
  84 │                   name: backend
  85 └                   ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'frontend' of Deployment 'hubble-ui' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:43-76
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  43 ┌                 - image: quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   livenessProbe:
  46 │                     failureThreshold: 3
  47 │                     httpGet:
  48 │                         path: /healthz
  49 │                         port: 8081
  50 │                         scheme: HTTP
  51 └                     periodSeconds: 10
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'envoy-proxy' of Deployment 'unguard-envoy-proxy' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-envoy-proxy:39-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - image: ghcr.io/dynatrace-oss/unguard/unguard-envoy-proxy:0.9.3
  40 │                   imagePullPolicy: IfNotPresent
  41 │                   name: envoy-proxy
  42 │                   ports:
  43 │                     - containerPort: 8080
  44 │                       name: http
  45 │                       protocol: TCP
  46 │                     - containerPort: 8081
  47 └                       name: health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'frontend' of Deployment 'unguard-frontend' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-frontend:36-81
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: MICROBLOG_SERVICE_ADDRESS
  38 │                       value: unguard-microblog-service
  39 │                     - name: PROXY_SERVICE_ADDRESS
  40 │                       value: unguard-proxy-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: AD_SERVICE_ADDRESS
  44 └                       value: unguard-ad-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'like-service' of Deployment 'unguard-like-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-like-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8000"
  39 │                     - name: API_PATH
  40 │                       value: /like-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: MARIADB_PASSWORD
  44 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'membership-service' of Deployment 'unguard-membership-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-membership-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Development
  39 │                     - name: SERVER_PORT
  40 │                       value: "8083"
  41 │                     - name: API_PATH
  42 │                       value: /membership-service
  43 │                     - name: MARIADB_SERVICE
  44 └                       value: unguard-mariadb
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'microblog-service' of Deployment 'unguard-microblog-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-microblog-service:36-61
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8080"
  39 │                     - name: REDIS_SERVICE_ADDRESS
  40 │                       value: unguard-redis
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: OPENTRACING_JAEGER_ENABLED
  44 └                       value: "false"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'payment-service' of Deployment 'unguard-payment-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-payment-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8084"
  39 │                     - name: API_PATH
  40 │                       value: /payment-service
  41 │                     - name: OTEL_LOGS_EXPORTER
  42 │                       value: none
  43 │                     - name: OTEL_METRICS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'profile-service' of Deployment 'unguard-profile-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-profile-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SPRING_DATASOURCE_URL
  38 │                       value: jdbc:h2:file:./database/bio
  39 │                     - name: SPRING_DATASOURCE_USERNAME
  40 │                       value: sa
  41 │                     - name: SPRING_DATASOURCE_PASSWORD
  42 │                       value: password
  43 │                     - name: OTEL_LOGS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'proxy-service' of Deployment 'unguard-proxy-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-proxy-service:36-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8081"
  39 │                     - name: OPENTRACING_JAEGER_ENABLED
  40 │                       value: "false"
  41 │                     - name: JAEGER_SERVICE_NAME
  42 │                       value: unguard-proxy-service
  43 │                     - name: JAEGER_AGENT_HOST
  44 └                       value: jaeger-agent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'redis' of Deployment 'unguard-redis' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-redis:36-75
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - command:
  37 │                     - redis-server
  38 │                     - /config/redis.conf
  39 │                   env:
  40 │                     - name: MASTER
  41 │                       value: "true"
  42 │                   image: redis:5.0
  43 │                   imagePullPolicy: IfNotPresent
  44 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'status-service' of Deployment 'unguard-status-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-status-service:36-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8083"
  39 │                     - name: API_PATH
  40 │                       value: /status-service
  41 │                     - name: KUBERNETES_NAMESPACE
  42 │                       value: unguard
  43 │                     - name: IGNORED_DEPLOYMENTS
  44 └                       value: unguard-user-simulator
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'user-auth-service' of Deployment 'unguard-user-auth-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-user-auth-service:36-64
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "9091"
  39 │                     - name: MARIADB_SERVICE
  40 │                       value: unguard-mariadb
  41 │                     - name: MARIADB_PASSWORD
  42 │                       valueFrom:
  43 │                         secretKeyRef:
  44 └                             key: mariadb-root-password
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'etcd' of Pod 'etcd-kind-control-plane' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/etcd-kind-control-plane:26-82
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - etcd
  28 │             - --advertise-client-urls=https://172.18.0.2:2379
  29 │             - --cert-file=/etc/kubernetes/pki/etcd/server.crt
  30 │             - --client-cert-auth=true
  31 │             - --data-dir=/var/lib/etcd
  32 │             - --experimental-initial-corrupt-check=true
  33 │             - --experimental-watch-progress-notify-interval=5s
  34 └             - --initial-advertise-peer-urls=https://172.18.0.2:2380
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-apiserver' of Pod 'kube-apiserver-kind-control-plane' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-apiserver-kind-control-plane:26-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  26 ┌         - command:
  27 │             - kube-apiserver
  28 │             - --advertise-address=172.18.0.2
  29 │             - --allow-privileged=true
  30 │             - --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log
  31 │             - --audit-policy-file=/etc/kubernetes/policies/audit-policy.yaml
  32 │             - --authorization-mode=Node,RBAC
  33 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  34 └             - --enable-admission-plugins=NodeRestriction
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-controller-manager' of Pod 'kube-controller-manager-kind-control-plane' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-controller-manager-kind-control-plane:25-95
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-controller-manager
  27 │             - --allocate-node-cidrs=true
  28 │             - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
  29 │             - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
  30 │             - --bind-address=127.0.0.1
  31 │             - --client-ca-file=/etc/kubernetes/pki/ca.crt
  32 │             - --cluster-cidr=10.244.0.0/16
  33 └             - --cluster-name=kind
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'kube-scheduler' of Pod 'kube-scheduler-kind-control-plane' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Pod/kube-scheduler-kind-control-plane:25-65
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  25 ┌         - command:
  26 │             - kube-scheduler
  27 │             - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
  28 │             - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
  29 │             - --bind-address=127.0.0.1
  30 │             - --kubeconfig=/etc/kubernetes/scheduler.conf
  31 │             - --leader-elect=true
  32 │           image: registry.k8s.io/kube-scheduler:v1.30.0
  33 └           imagePullPolicy: IfNotPresent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'postgresql' of StatefulSet 'kubeclarity-kubeclarity-postgresql' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/kubeclarity-kubeclarity-postgresql:57-133
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌                 - env:
  58 │                     - name: BITNAMI_DEBUG
  59 │                       value: "false"
  60 │                     - name: POSTGRESQL_PORT_NUMBER
  61 │                       value: "5432"
  62 │                     - name: POSTGRESQL_VOLUME_DIR
  63 │                       value: /bitnami/postgresql
  64 │                     - name: PGDATA
  65 └                       value: /bitnami/postgresql/data
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/unguard-mariadb (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mariadb' of StatefulSet 'unguard-mariadb' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/unguard-mariadb:56-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌                 - env:
  57 │                     - name: BITNAMI_DEBUG
  58 │                       value: "false"
  59 │                     - name: MARIADB_ROOT_PASSWORD
  60 │                       valueFrom:
  61 │                         secretKeyRef:
  62 │                             key: mariadb-root-password
  63 │                             name: unguard-mariadb
  64 └                     - name: MARIADB_DATABASE
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'gadget' of DaemonSet 'gadget' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'apply-sysctl-overwrites' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'cilium-agent' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'clean-cilium-state' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'config' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'install-cni-binaries' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:378-398
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 378 ┌                 - command:
 379 │                     - /install-plugin.sh
 380 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 381 │                   imagePullPolicy: IfNotPresent
 382 │                   name: install-cni-binaries
 383 │                   resources:
 384 │                     requests:
 385 │                         cpu: 100m
 386 └                         memory: 10Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mount-bpf-fs' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'mount-cgroup' of DaemonSet 'cilium' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'export-stdout' of DaemonSet 'tetragon' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:39-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - /var/run/cilium/tetragon/tetragon.log
  41 │                   command:
  42 │                     - hubble-export-stdout
  43 │                   image: quay.io/cilium/hubble-export-stdout:v1.0.4
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   name: export-stdout
  46 │                   resources: {}
  47 └                   securityContext: {}
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'tetragon' of DaemonSet 'tetragon' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'unguard-user-simulator' of CronJob 'unguard-user-simulator' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 CronJob/unguard-user-simulator:29-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌                         - env:
  30 │                             - name: FRONTEND_ADDR
  31 │                               value: unguard-envoy-proxy:8080/ui
  32 │                             - name: SIMULATE_PRIVATE_RANGES
  33 │                               value: "false"
  34 │                           image: ghcr.io/dynatrace-oss/unguard/unguard-user-simulator:0.9.3
  35 │                           imagePullPolicy: IfNotPresent
  36 │                           name: unguard-user-simulator
  37 └                           resources:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'ad-service' of Deployment 'unguard-ad-service' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-ad-service:36-63
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Production
  39 │                     - name: SERVER_PORT
  40 │                       value: "8082"
  41 │                     - name: API_PATH
  42 │                       value: /ad-service
  43 │                     - name: USER_AUTH_SERVICE_ADDRESS
  44 └                       value: unguard-user-auth-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'cilium-operator' of Deployment 'cilium-operator' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/ingress-nginx-controller (kubernetes)
================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/ingress-nginx-controller:49-124
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - /nginx-ingress-controller
  51 │                     - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  52 │                     - --election-id=ingress-nginx-leader
  53 │                     - --controller-class=k8s.io/ingress-nginx
  54 │                     - --ingress-class=nginx
  55 │                     - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  56 │                   env:
  57 └                     - name: POD_NAME
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'gadget' of DaemonSet 'gadget' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'apply-sysctl-overwrites' of DaemonSet 'cilium' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'cilium-agent' of DaemonSet 'cilium' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'clean-cilium-state' of DaemonSet 'cilium' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

HIGH: Container 'mount-cgroup' of DaemonSet 'cilium' should not include 'SYS_ADMIN' in 'securityContext.capabilities.add'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
SYS_ADMIN gives the processes running inside the container privileges that are equivalent to root.

See https://avd.aquasec.com/misconfig/ksv005
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: DaemonSet 'gadget' uses invalid seLinux type 'spc_t'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:15-205
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  15 ┌     revisionHistoryLimit: 10
  16 │     selector:
  17 │         matchLabels:
  18 │             k8s-app: gadget
  19 │     template:
  20 │         metadata:
  21 │             annotations:
  22 │                 container.apparmor.security.beta.kubernetes.io/gadget: unconfined
  23 └                 inspektor-gadget.kinvolk.io/option-hook-mode: auto
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: DaemonSet 'cilium' uses invalid seLinux type 'spc_t'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:20-488
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  20 ┌     revisionHistoryLimit: 10
  21 │     selector:
  22 │         matchLabels:
  23 │             k8s-app: cilium
  24 │     template:
  25 │         metadata:
  26 │             annotations:
  27 │                 cilium.io/cilium-configmap-checksum: be807b5457223052d9e69a28bd28dc0cdec9d86668a82d011167d4455f6042b2
  28 └                 container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: unconfined
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/tetragon-operator (kubernetes)
=========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "tetragon-operator" of deployment "tetragon-operator" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity-kubeclarity-wait-for-grype-server" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity-kubeclarity-wait-for-pg-db" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kubeclarity-kubeclarity-wait-for-sbom-db" of deployment "kubeclarity-kubeclarity" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-grype-server (kubernetes)
============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "grype-server" of deployment "kubeclarity-kubeclarity-grype-server" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-sbom-db (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "sbom-db" of deployment "kubeclarity-kubeclarity-sbom-db" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "local-path-provisioner" of deployment "local-path-provisioner" in "local-path-storage" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "backend" of deployment "hubble-ui" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "frontend" of deployment "hubble-ui" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "envoy-proxy" of deployment "unguard-envoy-proxy" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "frontend" of deployment "unguard-frontend" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "like-service" of deployment "unguard-like-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "membership-service" of deployment "unguard-membership-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "microblog-service" of deployment "unguard-microblog-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "payment-service" of deployment "unguard-payment-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "profile-service" of deployment "unguard-profile-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "proxy-service" of deployment "unguard-proxy-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "redis" of deployment "unguard-redis" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "status-service" of deployment "unguard-status-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "user-auth-service" of deployment "unguard-user-auth-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/etcd-kind-control-plane (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "etcd" of pod "etcd-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-apiserver-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kube-apiserver" of pod "kube-apiserver-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-controller-manager-kind-control-plane (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kube-controller-manager" of pod "kube-controller-manager-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Pod/kube-scheduler-kind-control-plane (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "kube-scheduler" of pod "kube-scheduler-kind-control-plane" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "postgresql" of statefulset "kubeclarity-kubeclarity-postgresql" in "kubeclarity" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/unguard-mariadb (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "mariadb" of statefulset "unguard-mariadb" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "gadget" of daemonset "gadget" in "gadget" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "apply-sysctl-overwrites" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "cilium-agent" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "clean-cilium-state" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "config" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "install-cni-binaries" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "mount-bpf-fs" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "mount-cgroup" of daemonset "cilium" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "export-stdout" of daemonset "tetragon" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "tetragon" of daemonset "tetragon" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-relay (kubernetes)
====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "hubble-relay" of deployment "hubble-relay" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "unguard-user-simulator" of cronjob "unguard-user-simulator" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "ad-service" of deployment "unguard-ad-service" in "unguard" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

MEDIUM: container "cilium-operator" of deployment "cilium-operator" in "kube-system" namespace should specify a seccomp profile
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/coredns (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/coredns:45-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  45 ┌                 - args:
  46 │                     - -conf
  47 │                     - /etc/coredns/Corefile
  48 │                   image: registry.k8s.io/coredns/coredns:v1.11.1
  49 │                   imagePullPolicy: IfNotPresent
  50 │                   livenessProbe:
  51 │                     failureThreshold: 5
  52 │                     httpGet:
  53 └                         path: /health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/tetragon-operator (kubernetes)
=========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/tetragon-operator:44-94
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  44 ┌                 - args:
  45 │                     - serve
  46 │                     - --config-dir=/etc/tetragon/operator.conf.d/
  47 │                     - --metrics-bind-address=:2113
  48 │                   command:
  49 │                     - /usr/bin/tetragon-operator
  50 │                   image: quay.io/cilium/tetragon-operator:v1.1.2
  51 │                   imagePullPolicy: IfNotPresent
  52 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:137-182
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 137 ┌                 - command:
 138 │                     - sh
 139 │                     - -c
 140 │                     - until pg_isready -h "$DB_HOST" -p "$DB_PORT_NUMBER" -U "$DB_USER" -d "dbname=$DB_NAME"; do echo waiting for database; sleep 2; done;
 141 │                   env:
 142 │                     - name: DB_NAME
 143 │                       valueFrom:
 144 │                         secretKeyRef:
 145 └                             key: postgres-database
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:183-210
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 183 ┌                 - args:
 184 │                     - /bin/sh
 185 │                     - -c
 186 │                     - |
 187 │                       set -x; while [ $(curl -sw '%{http_code}' "http://kubeclarity-kubeclarity-sbom-db:8081/healthz/ready" -o /dev/null) -ne 200 ]; do
 188 │                         echo waiting for sbom database; sleep 2;
 189 │                       done;
 190 │                   image: docker.io/curlimages/curl:7.87.0
 191 └                   imagePullPolicy: IfNotPresent
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:211-238
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 211 ┌                 - args:
 212 │                     - /bin/sh
 213 │                     - -c
 214 │                     - |
 215 │                       set -x; while [ $(curl -sw '%{http_code}' "http://kubeclarity-kubeclarity-grype-server:8080/healthz/ready" -o /dev/null) -ne 200 ]; do
 216 │                         echo waiting for grype-server to be ready; sleep 2;
 217 │                       done;
 218 │                   image: docker.io/curlimages/curl:7.87.0
 219 └                   imagePullPolicy: IfNotPresent
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity:39-134
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - run
  41 │                     - --log-level
  42 │                     - warning
  43 │                   env:
  44 │                     - name: ENABLE_DB_INFO_LOGS
  45 │                       value: "false"
  46 │                     - name: DB_NAME
  47 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-grype-server (kubernetes)
============================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity-grype-server:38-88
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  38 ┌                 - args:
  39 │                     - run
  40 │                     - --log-level
  41 │                     - warning
  42 │                   env:
  43 │                     - name: DB_ROOT_DIR
  44 │                       value: /tmp/
  45 │                   image: ghcr.io/openclarity/grype-server:v0.6.0
  46 └                   imagePullPolicy: Always
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/kubeclarity-kubeclarity-sbom-db (kubernetes)
=======================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/kubeclarity-kubeclarity-sbom-db:38-85
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  38 ┌                 - args:
  39 │                     - run
  40 │                     - --log-level
  41 │                     - warning
  42 │                   image: ghcr.io/openclarity/kubeclarity-sbom-db:v2.23.3
  43 │                   imagePullPolicy: Always
  44 │                   livenessProbe:
  45 │                     failureThreshold: 5
  46 └                     httpGet:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/local-path-provisioner (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/local-path-provisioner:18-36
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  18 ┌                 - command:
  19 │                     - local-path-provisioner
  20 │                     - --debug
  21 │                     - start
  22 │                     - --helper-image
  23 │                     - docker.io/kindest/local-path-helper:v20230510-486859a6
  24 │                     - --config
  25 │                     - /etc/config/config.json
  26 └                   env:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:43-76
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  43 ┌                 - image: quay.io/cilium/hubble-ui:v0.13.0@sha256:7d663dc16538dd6e29061abd1047013a645e6e69c115e008bee9ea9fef9a6666
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   livenessProbe:
  46 │                     failureThreshold: 3
  47 │                     httpGet:
  48 │                         path: /healthz
  49 │                         port: 8081
  50 │                         scheme: HTTP
  51 └                     periodSeconds: 10
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-ui (kubernetes)
=================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-ui:77-91
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  77 ┌                 - env:
  78 │                     - name: EVENTS_SERVER_PORT
  79 │                       value: "8090"
  80 │                     - name: FLOWS_API_ADDR
  81 │                       value: hubble-relay:80
  82 │                   image: quay.io/cilium/hubble-ui-backend:v0.13.0@sha256:1e7657d997c5a48253bb8dc91ecee75b63018d16ff5e5797e5af367336bc8803
  83 │                   imagePullPolicy: IfNotPresent
  84 │                   name: backend
  85 └                   ports:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-envoy-proxy (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-envoy-proxy:39-51
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - image: ghcr.io/dynatrace-oss/unguard/unguard-envoy-proxy:0.9.3
  40 │                   imagePullPolicy: IfNotPresent
  41 │                   name: envoy-proxy
  42 │                   ports:
  43 │                     - containerPort: 8080
  44 │                       name: http
  45 │                       protocol: TCP
  46 │                     - containerPort: 8081
  47 └                       name: health
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-frontend (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-frontend:36-81
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: MICROBLOG_SERVICE_ADDRESS
  38 │                       value: unguard-microblog-service
  39 │                     - name: PROXY_SERVICE_ADDRESS
  40 │                       value: unguard-proxy-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: AD_SERVICE_ADDRESS
  44 └                       value: unguard-ad-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-like-service (kubernetes)
============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-like-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8000"
  39 │                     - name: API_PATH
  40 │                       value: /like-service
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: MARIADB_PASSWORD
  44 └                       valueFrom:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-membership-service (kubernetes)
==================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-membership-service:36-58
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Development
  39 │                     - name: SERVER_PORT
  40 │                       value: "8083"
  41 │                     - name: API_PATH
  42 │                       value: /membership-service
  43 │                     - name: MARIADB_SERVICE
  44 └                       value: unguard-mariadb
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-microblog-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-microblog-service:36-61
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8080"
  39 │                     - name: REDIS_SERVICE_ADDRESS
  40 │                       value: unguard-redis
  41 │                     - name: USER_AUTH_SERVICE_ADDRESS
  42 │                       value: unguard-user-auth-service
  43 │                     - name: OPENTRACING_JAEGER_ENABLED
  44 └                       value: "false"
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-payment-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-payment-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8084"
  39 │                     - name: API_PATH
  40 │                       value: /payment-service
  41 │                     - name: OTEL_LOGS_EXPORTER
  42 │                       value: none
  43 │                     - name: OTEL_METRICS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-profile-service (kubernetes)
===============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-profile-service:36-69
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SPRING_DATASOURCE_URL
  38 │                       value: jdbc:h2:file:./database/bio
  39 │                     - name: SPRING_DATASOURCE_USERNAME
  40 │                       value: sa
  41 │                     - name: SPRING_DATASOURCE_PASSWORD
  42 │                       value: password
  43 │                     - name: OTEL_LOGS_EXPORTER
  44 └                       value: none
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-proxy-service (kubernetes)
=============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-proxy-service:36-57
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8081"
  39 │                     - name: OPENTRACING_JAEGER_ENABLED
  40 │                       value: "false"
  41 │                     - name: JAEGER_SERVICE_NAME
  42 │                       value: unguard-proxy-service
  43 │                     - name: JAEGER_AGENT_HOST
  44 └                       value: jaeger-agent
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-redis (kubernetes)
=====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-redis:36-75
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - command:
  37 │                     - redis-server
  38 │                     - /config/redis.conf
  39 │                   env:
  40 │                     - name: MASTER
  41 │                       value: "true"
  42 │                   image: redis:5.0
  43 │                   imagePullPolicy: IfNotPresent
  44 └                   livenessProbe:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-status-service (kubernetes)
==============================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-status-service:36-60
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "8083"
  39 │                     - name: API_PATH
  40 │                       value: /status-service
  41 │                     - name: KUBERNETES_NAMESPACE
  42 │                       value: unguard
  43 │                     - name: IGNORED_DEPLOYMENTS
  44 └                       value: unguard-user-simulator
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-user-auth-service (kubernetes)
=================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-user-auth-service:36-64
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: SERVER_PORT
  38 │                       value: "9091"
  39 │                     - name: MARIADB_SERVICE
  40 │                       value: unguard-mariadb
  41 │                     - name: MARIADB_PASSWORD
  42 │                       valueFrom:
  43 │                         secretKeyRef:
  44 └                             key: mariadb-root-password
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/kubeclarity-kubeclarity-postgresql (kubernetes)
===========================================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/kubeclarity-kubeclarity-postgresql:57-133
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  57 ┌                 - env:
  58 │                     - name: BITNAMI_DEBUG
  59 │                       value: "false"
  60 │                     - name: POSTGRESQL_PORT_NUMBER
  61 │                       value: "5432"
  62 │                     - name: POSTGRESQL_VOLUME_DIR
  63 │                       value: /bitnami/postgresql
  64 │                     - name: PGDATA
  65 └                       value: /bitnami/postgresql/data
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



StatefulSet/unguard-mariadb (kubernetes)
========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 StatefulSet/unguard-mariadb:56-118
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  56 ┌                 - env:
  57 │                     - name: BITNAMI_DEBUG
  58 │                       value: "false"
  59 │                     - name: MARIADB_ROOT_PASSWORD
  60 │                       valueFrom:
  61 │                         secretKeyRef:
  62 │                             key: mariadb-root-password
  63 │                             name: unguard-mariadb
  64 └                     - name: MARIADB_DATABASE
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/gadget (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/gadget:33-139
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  33 ┌                 - command:
  34 │                     - /entrypoint
  35 │                   env:
  36 │                     - name: NODE_NAME
  37 │                       valueFrom:
  38 │                         fieldRef:
  39 │                             apiVersion: v1
  40 │                             fieldPath: spec.nodeName
  41 └                     - name: GADGET_POD_UID
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:327-377
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 327 ┌                 - command:
 328 │                     - /init-container.sh
 329 │                   env:
 330 │                     - name: CILIUM_ALL_STATE
 331 │                       valueFrom:
 332 │                         configMapKeyRef:
 333 │                             key: clean-cilium-state
 334 │                             name: cilium-config
 335 └                             optional: true
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:277-308
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 277 ┌                 - command:
 278 │                     - sh
 279 │                     - -ec
 280 │                     - |
 281 │                       cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
 282 │                       nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
 283 │                       rm /hostbin/cilium-sysctlfix
 284 │                   env:
 285 └                     - name: BIN_PATH
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:309-326
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 309 ┌                 - args:
 310 │                     - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
 311 │                   command:
 312 │                     - /bin/bash
 313 │                     - -c
 314 │                     - --
 315 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 316 │                   imagePullPolicy: IfNotPresent
 317 └                   name: mount-bpf-fs
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:49-212
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  49 ┌                 - args:
  50 │                     - --config-dir=/tmp/cilium/config-map
  51 │                   command:
  52 │                     - cilium-agent
  53 │                   env:
  54 │                     - name: K8S_NODE_NAME
  55 │                       valueFrom:
  56 │                         fieldRef:
  57 └                             apiVersion: v1
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:378-398
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 378 ┌                 - command:
 379 │                     - /install-plugin.sh
 380 │                   image: quay.io/cilium/cilium:v1.15.4@sha256:b760a4831f5aab71c711f7537a107b751d0d0ce90dd32d8b358df3c5da385426
 381 │                   imagePullPolicy: IfNotPresent
 382 │                   name: install-cni-binaries
 383 │                   resources:
 384 │                     requests:
 385 │                         cpu: 100m
 386 └                         memory: 10Mi
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:243-276
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 243 ┌                 - command:
 244 │                     - sh
 245 │                     - -ec
 246 │                     - |
 247 │                       cp /usr/bin/cilium-mount /hostbin/cilium-mount;
 248 │                       nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
 249 │                       rm /hostbin/cilium-mount
 250 │                   env:
 251 └                     - name: CGROUP_ROOT
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/cilium (kubernetes)
=============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/cilium:216-242
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 216 ┌                 - command:
 217 │                     - cilium-dbg
 218 │                     - build-config
 219 │                   env:
 220 │                     - name: K8S_NODE_NAME
 221 │                       valueFrom:
 222 │                         fieldRef:
 223 │                             apiVersion: v1
 224 └                             fieldPath: spec.nodeName
 ...   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:39-52
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  39 ┌                 - args:
  40 │                     - /var/run/cilium/tetragon/tetragon.log
  41 │                   command:
  42 │                     - hubble-export-stdout
  43 │                   image: quay.io/cilium/hubble-export-stdout:v1.0.4
  44 │                   imagePullPolicy: IfNotPresent
  45 │                   name: export-stdout
  46 │                   resources: {}
  47 └                   securityContext: {}
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



DaemonSet/tetragon (kubernetes)
===============================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 DaemonSet/tetragon:53-89
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  53 ┌                 - args:
  54 │                     - --config-dir=/etc/tetragon/tetragon.conf.d/
  55 │                   env:
  56 │                     - name: NODE_NAME
  57 │                       valueFrom:
  58 │                         fieldRef:
  59 │                             apiVersion: v1
  60 │                             fieldPath: spec.nodeName
  61 └                   image: quay.io/cilium/tetragon:v1.1.2
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/hubble-relay (kubernetes)
====================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/hubble-relay:48-99
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  48 ┌                 - args:
  49 │                     - serve
  50 │                   command:
  51 │                     - hubble-relay
  52 │                   image: quay.io/cilium/hubble-relay:v1.15.4@sha256:03ad857feaf52f1b4774c29614f42a50b370680eb7d0bfbc1ae065df84b1070a
  53 │                   imagePullPolicy: IfNotPresent
  54 │                   livenessProbe:
  55 │                     failureThreshold: 3
  56 └                     grpc:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



CronJob/unguard-user-simulator (kubernetes)
===========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 CronJob/unguard-user-simulator:29-45
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  29 ┌                         - env:
  30 │                             - name: FRONTEND_ADDR
  31 │                               value: unguard-envoy-proxy:8080/ui
  32 │                             - name: SIMULATE_PRIVATE_RANGES
  33 │                               value: "false"
  34 │                           image: ghcr.io/dynatrace-oss/unguard/unguard-user-simulator:0.9.3
  35 │                           imagePullPolicy: IfNotPresent
  36 │                           name: unguard-user-simulator
  37 └                           resources:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/unguard-ad-service (kubernetes)
==========================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/unguard-ad-service:36-63
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  36 ┌                 - env:
  37 │                     - name: ASPNETCORE_ENVIRONMENT
  38 │                       value: Production
  39 │                     - name: SERVER_PORT
  40 │                       value: "8082"
  41 │                     - name: API_PATH
  42 │                       value: /ad-service
  43 │                     - name: USER_AUTH_SERVICE_ADDRESS
  44 └                       value: unguard-user-auth-service
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────



Deployment/cilium-operator (kubernetes)
=======================================
Tests: 1 (SUCCESSES: 0, FAILURES: 1, EXCEPTIONS: 0)
Failures: 0 ()

LOW: Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 Deployment/cilium-operator:55-116
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  55 ┌                 - args:
  56 │                     - --config-dir=/tmp/cilium/config-map
  57 │                     - --debug=$(CILIUM_DEBUG)
  58 │                   command:
  59 │                     - cilium-operator-generic
  60 │                   env:
  61 │                     - name: K8S_NODE_NAME
  62 │                       valueFrom:
  63 └                         fieldRef:
  ..   
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


